M_Juba %>% glimpse()
#register your google sheet
M_Jubasheet <-gs_title("correlations")
#get the key of your sheet
M_Jubasheet_key <-gs_gap_key()
#define variables/columns to be correlated
Date <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "A1:A97")
actualarrivals <- (M_Jubasheet %>% gs_read(w= "M_Juba", range = "B1:B97"))
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_MJ1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "C1:C97")
modelarrivals_MJ2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "D1:D97")
modelarrivals_MJ3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "E1:E97")
modelarrivals_MJ4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "F1:F97")
modelarrivals_MJ5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "G1:G97")
modelarrivals_MJ6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "H1:H97")
modelarrivals_MJ7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "I1:I97")
modelarrivals_MJ8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "J1:J97")
modelarrivals_MJ9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "K1:K97")
modelarrivals_MJ10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "L1:L97")
minus1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "M1:M97")
modelarrivals_MJJUN1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "N1:N97")
modelarrivals_MJJUN2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "O1:O97")
modelarrivals_MJJUN3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "P1:P97")
modelarrivals_MJJUN4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "Q1:Q97")
modelarrivals_MJJUN5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "R1:R97")
modelarrivals_MJJUN6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "S1:S97")
modelarrivals_MJJUN7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "T1:T97")
modelarrivals_MJJUN8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "U1:U97")
modelarrivals_MJJUN9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "V1:V97")
modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "W1:W97")
#modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "X1:X97")
# ---- plot section you can ignore ------#
plot(x,y, main="Actual Arrivals vs. Model Arrivals, Bay", xlab="Actual Arrivals", ylab="Model Arrivals", pch=15, cex=1, col="blue")
#install mice for imputation of NAs prior COR
#install.packages("mice")
library(mice)
#understanding missing patterns of data
md.pattern(M_Juba)
#visualize missing patterns, install package
#install.packages("VIM")
library(VIM)
#install.packages("missForest")
library(missForest)
#graph missing data by %. If more than 50% then is not ideal to run a correlation
aggr_plot <- aggr(M_Juba, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(M_Juba), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#another visual
marginplot(M_Juba[c(1,2)])
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
storage <- list()
ice <- list()
cib <- list()
for(i in names(Rebe)[-1]){
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
rebe
Rebe
names(Rebe)
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_MJ1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "C1:C97")
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
for(i in names(Rebe)[-1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
for(i in names(Rebe)){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[-2]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
storage <- list()
ice <- list()
cib <- list()
for(i in names(Rebe)[-1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[+1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[-1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[,-1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
get(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
print(i)
for(i in names(Rebe)[-1]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[-2]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
#first install the following packages: readxl, mice, VIM, missForest, googlesheets. like: install.packages("googlesheets")
library(readxl)
library(mice)
library(googlesheets)
library(dplyr)
#name your data framework (df) by reading data from excel <- this is just to run in a simple excel
#M_Juba <- read_excel("~/Desktop/14A.xlsx",
#col_types = c("date", "numeric", "numeric"))
#TO RUN VIA GOOGLE SHEETS
#name your data framework (df) by reading data from googlesheets (automatizing)
myURL <-"https://docs.google.com/spreadsheets/d/e/2PACX-1vTGcnmYMki3euv4bcsgBqBRY1-sDl6zkVl0gGC8THLygJoYlYnfm4cY5bVCA8BXnmciFXnp6aEvow31/pub?gid=1583648594&single=true&output=csv"
M_Juba<-read.csv(url(myURL))
#glimpse your google sheet to see also columns auto-assigned names
M_Juba %>% glimpse()
#register your google sheet
M_Jubasheet <-gs_title("correlations")
#get the key of your sheet
M_Jubasheet_key <-gs_gap_key()
#define variables/columns to be correlated
Date <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "A1:A97")
actualarrivals <- (M_Jubasheet %>% gs_read(w= "M_Juba", range = "B1:B97"))
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_MJ1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "C1:C97")
modelarrivals_MJ2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "D1:D97")
modelarrivals_MJ3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "E1:E97")
modelarrivals_MJ4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "F1:F97")
modelarrivals_MJ5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "G1:G97")
modelarrivals_MJ6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "H1:H97")
modelarrivals_MJ7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "I1:I97")
modelarrivals_MJ8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "J1:J97")
modelarrivals_MJ9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "K1:K97")
modelarrivals_MJ10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "L1:L97")
minus1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "M1:M97")
modelarrivals_MJJUN1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "N1:N97")
modelarrivals_MJJUN2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "O1:O97")
modelarrivals_MJJUN3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "P1:P97")
modelarrivals_MJJUN4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "Q1:Q97")
modelarrivals_MJJUN5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "R1:R97")
modelarrivals_MJJUN6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "S1:S97")
modelarrivals_MJJUN7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "T1:T97")
modelarrivals_MJJUN8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "U1:U97")
modelarrivals_MJJUN9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "V1:V97")
modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "W1:W97")
#modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "X1:X97")
# ---- plot section you can ignore ------#
plot(x,y, main="Actual Arrivals vs. Model Arrivals, Bay", xlab="Actual Arrivals", ylab="Model Arrivals", pch=15, cex=1, col="blue")
#install mice for imputation of NAs prior COR
#install.packages("mice")
library(mice)
#understanding missing patterns of data
md.pattern(M_Juba)
#visualize missing patterns, install package
#install.packages("VIM")
library(VIM)
#install.packages("missForest")
library(missForest)
#graph missing data by %. If more than 50% then is not ideal to run a correlation
aggr_plot <- aggr(M_Juba, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(M_Juba), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#another visual
marginplot(M_Juba[c(1,2)])
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
storage <- list()
ice <- list()
cib <- list()
for(i in names(Rebe)[-2]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)[-2]){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
for(i in names(Rebe)){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
#first install the following packages: readxl, mice, VIM, missForest, googlesheets. like: install.packages("googlesheets")
library(readxl)
library(mice)
library(googlesheets)
library(dplyr)
#name your data framework (df) by reading data from excel <- this is just to run in a simple excel
#M_Juba <- read_excel("~/Desktop/14A.xlsx",
#col_types = c("date", "numeric", "numeric"))
#TO RUN VIA GOOGLE SHEETS
#name your data framework (df) by reading data from googlesheets (automatizing)
myURL <-"https://docs.google.com/spreadsheets/d/e/2PACX-1vTGcnmYMki3euv4bcsgBqBRY1-sDl6zkVl0gGC8THLygJoYlYnfm4cY5bVCA8BXnmciFXnp6aEvow31/pub?gid=1583648594&single=true&output=csv"
M_Juba<-read.csv(url(myURL))
#glimpse your google sheet to see also columns auto-assigned names
M_Juba %>% glimpse()
#register your google sheet
M_Jubasheet <-gs_title("correlations")
#get the key of your sheet
M_Jubasheet_key <-gs_gap_key()
#define variables/columns to be correlated
Date <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "A1:A97")
actualarrivals <- (M_Jubasheet %>% gs_read(w= "M_Juba", range = "B1:B97"))
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_MJ1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "C1:C97")
modelarrivals_MJ2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "D1:D97")
modelarrivals_MJ3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "E1:E97")
modelarrivals_MJ4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "F1:F97")
modelarrivals_MJ5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "G1:G97")
modelarrivals_MJ6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "H1:H97")
modelarrivals_MJ7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "I1:I97")
modelarrivals_MJ8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "J1:J97")
modelarrivals_MJ9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "K1:K97")
modelarrivals_MJ10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "L1:L97")
minus1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "M1:M97")
modelarrivals_MJJUN1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "N1:N97")
modelarrivals_MJJUN2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "O1:O97")
modelarrivals_MJJUN3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "P1:P97")
modelarrivals_MJJUN4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "Q1:Q97")
modelarrivals_MJJUN5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "R1:R97")
modelarrivals_MJJUN6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "S1:S97")
modelarrivals_MJJUN7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "T1:T97")
modelarrivals_MJJUN8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "U1:U97")
modelarrivals_MJJUN9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "V1:V97")
modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "W1:W97")
#modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "X1:X97")
# ---- plot section you can ignore ------#
plot(x,y, main="Actual Arrivals vs. Model Arrivals, Bay", xlab="Actual Arrivals", ylab="Model Arrivals", pch=15, cex=1, col="blue")
#install mice for imputation of NAs prior COR
#install.packages("mice")
library(mice)
#understanding missing patterns of data
md.pattern(M_Juba)
#visualize missing patterns, install package
#install.packages("VIM")
library(VIM)
#install.packages("missForest")
library(missForest)
#graph missing data by %. If more than 50% then is not ideal to run a correlation
aggr_plot <- aggr(M_Juba, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(M_Juba), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#another visual
marginplot(M_Juba[c(1,2)])
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
storage <- list()
ice <- list()
cib <- list()
for(i in names(Rebe)){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=Rebe)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
cbind(names(Rebe), ice)
cbind(names(Rebe), ice, cib)
cbind(names(Rebe), AIC=c(ice), BIC=c(cib))
cbind(names = c(names(Rebe)), AIC=c(ice), BIC=c(cib))
data.frame(names = c(names(Rebe)), AIC=c(ice), BIC=c(cib))
cbind(names = c(names(Rebe)), AIC=c(ice), BIC=c(cib))
K <- cbind(names = c(names(Rebe)), AIC=c(ice), BIC=c(cib))
K <- rbind(names = c(names(Rebe)), AIC=c(ice), BIC=c(cib))
K
write.csv(K, file ="allresults.csv",row.names = FALSE)
linearMod <- lm(actualarrivals ~ modelarrivals_MJ1, data=M_Juba)  # build linear regression model on full data <-- CHANGE HERE MODEL
print(linearMod)
#linear regression diagnostic
summary(linearMod)
#calculate Akaike’s information criterion - AIC and the Bayesian information criterion - BIC
AIC(linearMod)
BIC(linearMod)
linearMod <- lm(actualarrivals ~ modelarrivals_MJ1, data=M_Juba)  # build linear regression model on full data <-- CHANGE HERE MODEL
print(linearMod)
#linear regression diagnostic
summary(linearMod)
#calculate Akaike’s information criterion - AIC and the Bayesian information criterion - BIC
AIC(linearMod)
BIC(linearMod)
linearMod <- lm(actualarrivals ~ modelarrivals_MJ1, data=Rebe)  # build linear regression model on full data <-- CHANGE HERE MODEL
linearMod <- lm(unlist(actualarrivals) ~ modelarrivals_MJ1, data=Rebe)  # build linear regression model on full data <-- CHANGE HERE MODEL
print(linearMod)
#linear regression diagnostic
summary(linearMod)
#calculate Akaike’s information criterion - AIC and the Bayesian information criterion - BIC
AIC(linearMod)
BIC(linearMod)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=M_Juba)
unlist(actualarrivals)
storage <- list()
ice <- list()
cib <- list()
for(i in names(Rebe)){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=M_Juba)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
#first install the following packages: readxl, mice, VIM, missForest, googlesheets. like: install.packages("googlesheets")
library(readxl)
library(mice)
library(googlesheets)
library(dplyr)
#name your data framework (df) by reading data from excel <- this is just to run in a simple excel
#M_Juba <- read_excel("~/Desktop/14A.xlsx",
#col_types = c("date", "numeric", "numeric"))
#TO RUN VIA GOOGLE SHEETS
#name your data framework (df) by reading data from googlesheets (automatizing)
myURL <-"https://docs.google.com/spreadsheets/d/e/2PACX-1vTGcnmYMki3euv4bcsgBqBRY1-sDl6zkVl0gGC8THLygJoYlYnfm4cY5bVCA8BXnmciFXnp6aEvow31/pub?gid=1583648594&single=true&output=csv"
M_Juba<-read.csv(url(myURL))
#glimpse your google sheet to see also columns auto-assigned names
M_Juba %>% glimpse()
#register your google sheet
M_Jubasheet <-gs_title("correlations")
#get the key of your sheet
M_Jubasheet_key <-gs_gap_key()
#define variables/columns to be correlated
Date <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "A1:A97")
actualarrivals <- (M_Jubasheet %>% gs_read(w= "M_Juba", range = "B1:B97"))
#substitute name of the column depending on the function. (e.g. Column 1 = A, Column 2 = B, and Column C = 3, and so on...)
modelarrivals_MJ1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "C1:C97")
modelarrivals_MJ2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "D1:D97")
modelarrivals_MJ3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "E1:E97")
modelarrivals_MJ4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "F1:F97")
modelarrivals_MJ5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "G1:G97")
modelarrivals_MJ6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "H1:H97")
modelarrivals_MJ7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "I1:I97")
modelarrivals_MJ8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "J1:J97")
modelarrivals_MJ9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "K1:K97")
modelarrivals_MJ10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "L1:L97")
minus1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "M1:M97")
modelarrivals_MJJUN1 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "N1:N97")
modelarrivals_MJJUN2 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "O1:O97")
modelarrivals_MJJUN3 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "P1:P97")
modelarrivals_MJJUN4 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "Q1:Q97")
modelarrivals_MJJUN5 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "R1:R97")
modelarrivals_MJJUN6 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "S1:S97")
modelarrivals_MJJUN7 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "T1:T97")
modelarrivals_MJJUN8 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "U1:U97")
modelarrivals_MJJUN9 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "V1:V97")
modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "W1:W97")
#modelarrivals_MJJUN10 <- M_Jubasheet %>% gs_read(w= "M_Juba", range = "X1:X97")
# ---- plot section you can ignore ------#
plot(x,y, main="Actual Arrivals vs. Model Arrivals, Bay", xlab="Actual Arrivals", ylab="Model Arrivals", pch=15, cex=1, col="blue")
#install mice for imputation of NAs prior COR
#install.packages("mice")
library(mice)
#understanding missing patterns of data
md.pattern(M_Juba)
#visualize missing patterns, install package
#install.packages("VIM")
library(VIM)
#install.packages("missForest")
library(missForest)
#graph missing data by %. If more than 50% then is not ideal to run a correlation
aggr_plot <- aggr(M_Juba, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(M_Juba), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
#another visual
marginplot(M_Juba[c(1,2)])
#--------------------------RUN UNTIL HERE------------------------#
#FINDING BEST FIT
#build a linear model1
Rebe<- data.frame( modelarrivals_MJ1 ,  modelarrivals_MJ2 ,  modelarrivals_MJ3 ,  modelarrivals_MJ4 ,  modelarrivals_MJ5 ,  modelarrivals_MJ6 ,  modelarrivals_MJ7 ,  modelarrivals_MJ8 ,  modelarrivals_MJ9 ,  modelarrivals_MJ10 ,  minus1 ,  modelarrivals_MJJUN1 ,  modelarrivals_MJJUN2 ,  modelarrivals_MJJUN3 ,  modelarrivals_MJJUN4 ,  modelarrivals_MJJUN5 ,  modelarrivals_MJJUN6 ,  modelarrivals_MJJUN7 ,  modelarrivals_MJJUN8 ,  modelarrivals_MJJUN9 ,  modelarrivals_MJJUN10  )
storage <- list()
ice <- list()
cib <- list()
for(i in names(Rebe)){
print(i)
linearMod <- lm( unlist(actualarrivals) ~ get(i), data=M_Juba)
summary(linearMod)
storage[[i]] <- linearMod
print(AIC(linearMod))
print(BIC(linearMod))
ice[[i]] <- as.numeric(AIC(linearMod))
cib[[i]] <- as.numeric(BIC(linearMod))
}
K <- rbind(names = c(names(Rebe)), AIC=c(ice), BIC=c(cib))
write.csv(K, file ="allresults.csv",row.names = FALSE)
shiny::runApp('C:/Users/sofia/shinyapp-somalia')
runApp('C:/Users/sofia/shinyapp-somalia')
runApp('C:/Users/sofia/shinyapp-somalia')
shiny::runApp('Google Drive - Copy/UNHCR/App/AwdalMonthly')
runApp('Google Drive - Copy/UNHCR/App/AwdalMonthly')
runApp('Google Drive - Copy/UNHCR/App/AwdalMonthly')
runApp('Google Drive - Copy/UNHCR/App/AwdalMonthly')
runApp('Google Drive - Copy/UNHCR/App/AwdalMonthly')
shiny::runApp('C:/Users/sofia/shinyapp-somalia')
setwd("C:/Users/sofia/somalia")
shiny::runApp()
runApp()
